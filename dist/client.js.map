{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/browserify/node_modules/events/events.js","src/client.js","src/roll_standalone.js"],"names":[],"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","file":"client.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      }\n      throw TypeError('Uncaught, unspecified \"error\" event.');\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        len = arguments.length;\n        args = new Array(len - 1);\n        for (i = 1; i < len; i++)\n          args[i - 1] = arguments[i];\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    len = arguments.length;\n    args = new Array(len - 1);\n    for (i = 1; i < len; i++)\n      args[i - 1] = arguments[i];\n\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    var m;\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  var ret;\n  if (!emitter._events || !emitter._events[type])\n    ret = 0;\n  else if (isFunction(emitter._events[type]))\n    ret = 1;\n  else\n    ret = emitter._events[type].length;\n  return ret;\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n","var EventEmitter = require('events').EventEmitter;\n\n/**\n * Roll simply keep tracks of steps' positions inside a viewport.\n * Apart from the static helper functions and the `scroll` function, a roll instance doesn't depend on DOM manipulation.\n * That means you can use a Roll instance in contexts other than DOM.\n */\nexport default class Roll extends EventEmitter {\n\n  /**\n   * Create a new Roll.\n   * @param viewSize viewport size (single dimension)\n   */\n  constructor( viewSize ) {\n    super();\n\n    this.viewportSize = viewSize;\n    this.paneSize = 0;\n\n    // store the steps object {y1, y2, size, pad}, See Roll.chunk\n    this.steps = [];\n\n    this.pos = 0; // current position\n    this.current = 0; // current step\n    this.last = -1; // last step\n\n    this.movingInterval = -1;\n  }\n\n\n  /**\n   * Add a step object. You can also use Roll.chunk() static helper function to create a step object easily.\n   * @param s an object with {p1, p2, size, pad} properties, or an array of steps object\n   * @returns {Roll}\n   */\n  addStep(s) {\n\n    if (!Array.isArray(s)) {\n      s = [s];\n    }\n\n    // get last recorded step\n    var d = s[0].p1;\n    if (this.steps.length > 0 ) {\n      var last = this.steps[this.steps.length-1];\n      d = last.p2 + last.pad;\n    }\n\n    // append new steps\n    for (var i=0; i<s.length; i++) {\n      s[i].p1 = d;\n      s[i].p2 = s[i].p1 + s[i].size;\n      d = s[i].p2 + s[i].pad;\n      this.steps.push( s[i] );\n    }\n\n    // recalculate pane size\n    this.getHeight( true );\n\n    return this;\n  }\n\n\n  /**\n   * Get step by index\n   * @param index\n   */\n  getStepAt( index ) {\n    return this.steps[ Math.max( 0, Math.min( this.steps.length-1, index) )];\n  }\n\n\n  /**\n   * Calculate and return current step. When padding > 0, step will be -1 when current progress is on the padding area. This allows you to check progress against padding.\n   * @returns {number}\n   */\n  getStep() {\n    for (var i=0; i<this.steps.length; i++) {\n      var st = this.steps[i];\n      if (st.p1 >= -this.viewportSize && st.p2 <= st.size ) {\n        this.current = i;\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Get current progress within the current step\n   * @returns 0-1 if step.pad is 0. Otherwise it will range from negative to positive.\n   */\n  getStepProgress() {\n    var curr = this.steps[ this.current ];\n    return 1 - (curr.p2 / curr.size);\n  }\n\n\n  /**\n   * Get current position\n   * @returns {number|*}\n   */\n  getPosition() {\n    return this.pos;\n  }\n\n  /**\n   * Get total height of the pane (including padding)\n   * @returns {*}\n   */\n  getHeight( recalc = false ) {\n    if (recalc ) this.paneSize = this.steps.reduce( (a,b) => a+b.size+b.pad, 0 );\n    return this.paneSize;\n  }\n\n  /**\n   * Get viewport's height (same as this.viewportSize)\n   * @returns {*}\n   */\n  getViewportHeight() {\n    return this.viewportSize;\n  }\n\n\n  /**\n   * Move the roll. This will emit two events `roll(step, currProgress, currPosition, totalProgress)` and `step(curr, last)`\n   * @param pos new position\n   * @returns {Roll}\n   */\n  move( pos ) {\n    var last = this.pos;\n    this.pos = -pos;\n    var diff = this.pos - last;\n\n    for (var i=0; i<this.steps.length; i++) {\n      let s = this.steps[i];\n      s.p1 += diff;\n      s.p2 = s.p1 + s.size;\n    }\n\n    var curr = this.getStep();\n    var progress = this.getStepProgress();\n    this.emit(\"roll\", curr, progress, pos, pos/(this.paneSize-this.viewportSize) );\n\n    if (curr != this.last && curr >= 0) {\n      this.emit(\"step\", curr, this.last, this.viewportSize );\n      this.last = curr;\n    }\n\n    return this;\n  }\n\n\n  /**\n   * Animated scrolling a DOM element\n   * @param index step index\n   * @param scrollPane a DOM element with scrolling (overflow-y).\n   * @param speed optional speed of animated scroll. Defaults to 0.1. Larger is faster\n   * @param isVertical optional boolean to indicate horizontal or vertical scroll\n   */\n  scroll( index, scrollPane, speed=0.1, isVertical=true) {\n    if (!scrollPane || scrollPane.scrollTop == null) throw \"scrollPane parameter requires a DOM element with scrollTop property\";\n    clearInterval( this.movingInterval );\n    var _temp = Number.NEGATIVE_INFINITY;\n    var dir = (isVertical) ? \"scrollTop\" : \"scrollLeft\";\n\n    this.movingInterval = setInterval( () => {\n      var target = this.getStepAt(index);\n      var d = (target.p1 + target.size/4) * speed;\n      scrollPane[dir] += d;\n      if (Math.abs(d)<1 || _temp === scrollPane[dir]) clearInterval(this.movingInterval);\n      _temp = scrollPane[dir];\n    }, 17);\n  }\n\n\n  /**\n   * A convenient static function to create a step object\n   * @param size chunk size\n   * @param pad optional padding (default to 0)\n   * @returns {{p1: number, p2: *, size: *, pad: number}}\n   */\n  static chunk( size, pad=0) {\n    return {\n      p1: 0,\n      p2: size,\n      size: size,\n      pad: pad\n    }\n  }\n\n\n  /**\n   * A convenient static function to compare a step with current step, and transform it to a name\n   * @param step the step to check\n   * @param currStep current step\n   * @param prev optional class name for step is < currStep. Defaults to \"prev\"\n   * @param next optional class name for step is > currStep. Defaults to \"next\"\n   * @param match optional class name for step = currStep. Defaults to \"curr\"\n   * @returns {string}\n   */\n  static stepName( step, currStep, prev=\"prev\", next=\"next\", match=\"curr\") {\n    return (step === currStep) ? match : ( (step < currStep) ? prev : next );\n  }\n\n\n  /**\n   * Static helper to get a handle function for Roll's \"step\" event. The handler function will add class names to each step element based on current step value.\n   * @param roll a Roll instance\n   * @param views a list of DOM elements which are the steps\n   * @param prev optional class name for step is < currStep. Defaults to \"prev\"\n   * @param next optional class name for step is > currStep. Defaults to \"next\"\n   * @param match optional class name for step = currStep. Defaults to \"curr\"\n   * @returns {Function}\n   */\n  static stepHandler( roll, views, prev=\"prev\", next=\"next\", match=\"curr\", trackTopPos=false) {\n    return function ( curr, last, viewportHeight ) {\n      for (var i = 0; i < roll.steps.length; i++) {\n        var cls = Roll.stepName( i, curr, prev, next, match );\n        views[i].className = \"step \" + cls;\n\n        // if steps have different sizes, recalc top position and set style\n        if (trackTopPos) {\n          var p = (cls===prev) ?  roll.steps[i].size * -1 : ((cls===next) ? viewportHeight : 0);\n          views[i].style.top = p+\"px\";\n        }\n      }\n    }\n  }\n\n\n  /**\n   * Static method to create a Roll instance with DOM elements\n   * @param viewPortID id of viewport element, which is the parent of the viewPane. eg, \"#viewport\"\n   * @param viewPaneID id of view pane element, eg, \"#pane\"\n   * @param viewBox id of view box element, which is the parent the viewClass elements. eg, \"#steps\"\n   * @param viewClass id of each step or slide element, eg, \".step\"\n   * @param pad optional padding between steps. Defaults to 0.\n   * @returns the roll instance which you can listen for \"step\" and \"roll\" event via `roll.on(...)`\n   */\n  static DOM( viewPortID, viewPaneID, viewBoxID, viewClass, pad=0 ) {\n\n    var viewport = document.querySelector( viewPortID );\n    var viewpane = viewport.querySelector( viewPaneID );\n    var viewbox = document.querySelector( viewBoxID );\n    var views = viewbox.querySelectorAll( viewClass );\n\n    if (!viewport || !viewpane) throw `Cannot find ${viewPortID} or ${viewPaneID} element id.`\n    if (!viewClass) throw `Cannot find ${viewClass} element class name`;\n\n    // create roll instance based on viewport element height\n    var roll = new Roll( viewport.getBoundingClientRect().height );\n\n    // add each viewClass element as a step\n    for (var i = 0; i < views.length; i++) {\n      var rect = views[i].getBoundingClientRect();\n      roll.addStep( Roll.chunk( rect.height, pad ) );\n    }\n\n    // update viewpane height based on steps\n    viewpane.style.height = roll.getHeight()+\"px\";\n\n    // update viewbox width to account for scrollbar\n    viewbox.style.width = viewpane.getBoundingClientRect().width+\"px\";\n\n    // track scroll\n    viewport.addEventListener(\"scroll\", function(evt) {\n      roll.move( viewport.scrollTop );\n    });\n\n    return roll;\n  }\n\n}\n","var Roll = require(\"./client.js\");\n\nif (window) window.Roll = Roll;\n\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset:utf-8;base64,"}